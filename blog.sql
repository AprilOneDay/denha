/*
SQLyog Professional v12.09 (64 bit)
MySQL - 5.7.19-log : Database - koudaiche
*********************************************************************
*/


/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`koudaiche` /*!40100 DEFAULT CHARACTER SET utf8 */;

/*Table structure for table `dh_article` */

DROP TABLE IF EXISTS `dh_article`;

CREATE TABLE `dh_article` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `type` tinyint(1) NOT NULL DEFAULT '1' COMMENT '类型',
  `tag` varchar(20) DEFAULT NULL COMMENT 'tag标签',
  `title` varchar(50) NOT NULL DEFAULT '' COMMENT '标题',
  `thumb` varchar(255) DEFAULT '' COMMENT '缩略图',
  `description` varchar(255) DEFAULT '' COMMENT '简介',
  `origin` varchar(300) DEFAULT '' COMMENT '来源地址',
  `is_show` tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT '显示状态 1显示 0关闭',
  `del_status` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '删除状态 1删除 0未删除',
  `created` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '创建时间',
  `hot` int(11) DEFAULT '0' COMMENT '热度',
  `is_recommend` tinyint(1) DEFAULT '0' COMMENT '推荐排行榜 1推荐 0不推荐',
  `publish_time` int(10) unsigned DEFAULT '0' COMMENT '发布时间',
  PRIMARY KEY (`id`),
  KEY `is_show` (`is_show`),
  KEY `is_recommend` (`is_recommend`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Data for the table `dh_article` */

insert  into `dh_article`(`id`,`type`,`tag`,`title`,`thumb`,`description`,`origin`,`is_show`,`del_status`,`created`,`hot`,`is_recommend`,`publish_time`) values (1,1,'6','Nginx 实现跨域使用字体文件','','Nginx 实现跨域使用字体文件','',1,0,1504970134,16,1,0),(2,1,'6','Nginx 跨域访问php  ','','Access-Control-Allow-Origin 错误','',1,0,1504970371,36,0,0),(3,1,'10','Html 文字内容只显示一行','','css控制文字内容只显示一行','',1,0,1505020972,158,0,0),(4,1,'8','docker 手把手教你基于官网镜像搭建mysql+php+nginx（一）','','使用的是官网镜像mysql:5.7php:5.6nignx:last准备工作你需要先安装dockerdocker-compose并且需要有一个github账户创建本地文件apahcemysqlsrv这里用不到主要需要创建的docker文件夹文件夹下创建对应mysqlnginxphp文件里面文件内容我们需要从容器里面拷贝出来后自己调整修改OK准备工作完成了先从php开始吧抓取php需要的配置文件保存在本地方便自己以后修改创建phpDockerfile在php下创建Docker','',1,0,1507688317,10,1,0),(5,1,'9','linux命令之crontab定时执行任务','','一般情况下，我们在操作和运维VPS、服务器的时候可能会用到crontab定时任务的配置，比如定时的重启服务器、定时备份数据等操作使用的还是比较多的。这里就离不开使用crontab命令的任务配置，在这篇文章中，老左将会整理较为齐全的crontab命令使用的方法以及常用的实例操作。从上图中，我们其实就可以看到crontab具体用法。一共有6个段落，前面5个标示定时的时间设定，后面一个标示文件的路径定时执行。第一、crontab安装一般我们使用的centos或者debian发行版本都自带crontab定时软件支','http://www.laozuo.org/7110.html',1,0,1507694379,9,0,0),(6,1,'3','mysql数据库主从服务器常见问题处理','','Slave_IO_Running Checking master version','http://blog.csdn.net/lvyongyi_2010/article/details/23336249',1,0,1507701439,1,0,0);

/*Table structure for table `dh_article_blog` */

DROP TABLE IF EXISTS `dh_article_blog`;

CREATE TABLE `dh_article_blog` (
  `id` int(10) unsigned NOT NULL,
  `content` mediumtext COMMENT '博客内容',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `dh_article_blog` */

insert  into `dh_article_blog`(`id`,`content`) values (1,'<p>							 	</p><pre class=\"brush:php;toolbar:false\">location&nbsp;~*&nbsp;.(eot|ttf|woff|woff2|svg|otf)$&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add_header&nbsp;Access-Control-Allow-Origin&nbsp;http://dist.denha.loc;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#add_header&nbsp;Access-Control-Allow-Headers&nbsp;X-Requested-With;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#add_header&nbsp;Access-Control-Allow-Credentials&nbsp;true;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add_header&nbsp;Access-Control-Allow-Methods&nbsp;GET;\r\n}</pre><p><br/></p><p>							 	</p>'),(2,'<pre class=\"brush:php;toolbar:false\">\r\nlocation&nbsp;~&nbsp;.php(.*)$&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add_header&nbsp;Access-Control-Allow-Origin&nbsp;http://dist.denha.loc;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add_header&nbsp;Access-Control-Allow-Headers&nbsp;X-Requested-With;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add_header&nbsp;Access-Control-Allow-Credentials&nbsp;true;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add_header&nbsp;Access-Control-Allow-Methods&nbsp;GET,POST;\r\n}</pre><p><br/></p>'),(3,'<p>							 	</p><p>							 	</p><pre class=\"brush:html;toolbar:false\">&lt;ul&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a&nbsp;href=&quot;javascript:;&quot;&gt;餐馆&lt;/a&gt;&lt;/li&gt;\r\n&lt;/ul&gt;</pre><pre class=\"brush:css;toolbar:false\">css:\r\n\r\nli{\r\n&nbsp;white-space:nowrap;&nbsp;\r\n&nbsp;overflow:hidden;\r\n&nbsp;text-overflow:ellipsis;\r\n}</pre><p><br/></p><p><br/></p><p><br/></p><p>							 	</p><p>							 	</p>'),(4,'<p>							 	</p><p>							 	</p><p>							 	</p><p><strong>使用的是官网镜像 </strong><span style=\"color: rgb(192, 0, 0);\"><strong>mysql:5.7</strong></span><strong> <span style=\"color: rgb(192, 0, 0);\">php:5.6</span> <span style=\"color: rgb(192, 0, 0);\">nignx:last</span></strong></p><p><br/></p><p><strong>准备工作</strong></p><p><strong><br/></strong></p><p><span style=\"color: rgb(192, 0, 0);\">你需要先安装docker docker-compose并且需要有一个github账户</span></p><p><br/></p><p><strong>创建本地文件</strong></p><p><strong><br/></strong></p><p><strong><img src=\"/uploadfile/ueditor/20171011/1507686028368988.png\" title=\"1507686028368988.png\" alt=\"image.png\"/></strong></p><p>apahce mysqlsrv 这里用不到 主要需要创建的docker文件夹 文件夹下创建对应mysql nginx php文件 里面文件内容我们需要从容器里面拷贝出来后自己调整修改</p><p><br/></p><p><span style=\"color: rgb(192, 0, 0);\">OK准备工作完成了 先从php开始吧</span></p><p><br/></p><p><strong>抓取php需要的配置文件保存在本地方便自己以后修改</strong></p><p><br/></p><p><br/></p><p><strong>创建phpDockerfile</strong></p><p><strong><br/></strong></p><p>在php 下创建Dockerfile文件<span style=\"color: rgb(192, 0, 0);\">（我已屏蔽了非主要模块 后续需要可以自行添加）</span></p><p>文件内容如下：</p><pre class=\"brush:bash;toolbar:false\">#&nbsp;name:docker_php\r\n#&nbsp;use:store&nbsp;&nbsp;\r\n#&nbsp;date:2017-09-04&nbsp;&nbsp;\r\n&nbsp;&nbsp;\r\nFROM&nbsp;php:5.6-fpm\r\n\r\nMAINTAINER&nbsp;siyue&nbsp;350375092@qq.com&nbsp;&nbsp;\r\n\r\n#&nbsp;You&nbsp;may&nbsp;need&nbsp;proxy\r\n#&nbsp;RUN&nbsp;export&nbsp;http_proxy=192.168.1.10:1080\r\n#&nbsp;RUN&nbsp;export&nbsp;https_proxy=192.168.1.10:1080\r\n\r\n#&nbsp;Update&nbsp;ubuntu\r\n#RUN&nbsp;apt-get&nbsp;update\r\n\r\n#&nbsp;mcrypt\r\nRUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libmcrypt-dev\r\nRUN&nbsp;docker-php-ext-install&nbsp;mcrypt\r\n\r\n#&nbsp;GD\r\nRUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libfreetype6-dev&nbsp;libjpeg62-turbo-dev&nbsp;libpng12-dev\r\nRUN&nbsp;docker-php-ext-configure&nbsp;gd&nbsp;--with-freetype-dir=/usr/include/&nbsp;--with-jpeg-dir=/usr/include/\r\nRUN&nbsp;docker-php-ext-install&nbsp;-j$(nproc)&nbsp;gd\r\n\r\n#&nbsp;Intl\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libicu-dev\r\n#RUN&nbsp;docker-php-ext-install&nbsp;-j$(nproc)&nbsp;intl\r\n\r\n#&nbsp;General\r\nRUN&nbsp;docker-php-ext-install&nbsp;zip&nbsp;\r\nRUN&nbsp;docker-php-ext-install&nbsp;pcntl&nbsp;\r\nRUN&nbsp;docker-php-ext-install&nbsp;opcache&nbsp;\r\nRUN&nbsp;docker-php-ext-install&nbsp;pdo_mysql&nbsp;\r\nRUN&nbsp;docker-php-ext-install&nbsp;mysqli&nbsp;\r\n\r\n#&nbsp;SOAP&nbsp;Client\r\nRUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libxml2-dev\r\nRUN&nbsp;docker-php-ext-install&nbsp;soap\r\n\r\n#&nbsp;General&nbsp;extensions&nbsp;that&nbsp;may&nbsp;had&nbsp;be&nbsp;installed&nbsp;default\r\n#&nbsp;If&nbsp;not,&nbsp;install&nbsp;them&nbsp;with&nbsp;following&nbsp;command\r\n#RUN&nbsp;docker-php-ext-install&nbsp;ctype\r\n#RUN&nbsp;docker-php-ext-install&nbsp;dom\r\n#RUN&nbsp;docker-php-ext-install&nbsp;fileinfo\r\n#RUN&nbsp;docker-php-ext-install&nbsp;ftp\r\n#RUN&nbsp;docker-php-ext-install&nbsp;hash\r\nRUN&nbsp;docker-php-ext-install&nbsp;iconv\r\nRUN&nbsp;docker-php-ext-install&nbsp;json\r\nRUN&nbsp;docker-php-ext-install&nbsp;mbstring\r\nRUN&nbsp;docker-php-ext-install&nbsp;session\r\nRUN&nbsp;docker-php-ext-install&nbsp;pdo\r\nRUN&nbsp;docker-php-ext-install&nbsp;pdo_sqlite\r\n#RUN&nbsp;docker-php-ext-install&nbsp;posix\r\n#RUN&nbsp;docker-php-ext-install&nbsp;tokenizer\r\n#RUN&nbsp;docker-php-ext-install&nbsp;simplexml\r\n#RUN&nbsp;docker-php-ext-install&nbsp;xml\r\n#RUN&nbsp;docker-php-ext-install&nbsp;xmlreader\r\n#RUN&nbsp;docker-php-ext-install&nbsp;xmlwriter\r\n\r\n#&nbsp;CURL,&nbsp;may&nbsp;had&nbsp;be&nbsp;installed&nbsp;default\r\nRUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;curl\r\nRUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libcurl3\r\nRUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libcurl4-openssl-dev\r\nRUN&nbsp;docker-php-ext-install&nbsp;curl\r\n\r\n#&nbsp;More&nbsp;extensions\r\n#RUN&nbsp;docker-php-ext-install&nbsp;exif\r\n#RUN&nbsp;docker-php-ext-install&nbsp;bcmath\r\n#RUN&nbsp;docker-php-ext-install&nbsp;calendar\r\n#RUN&nbsp;docker-php-ext-install&nbsp;sockets\r\n#RUN&nbsp;docker-php-ext-install&nbsp;gettext\r\n#RUN&nbsp;docker-php-ext-install&nbsp;phar\r\n#RUN&nbsp;docker-php-ext-install&nbsp;shmop\r\n#RUN&nbsp;docker-php-ext-install&nbsp;sysvmsg\r\n#RUN&nbsp;docker-php-ext-install&nbsp;sysvsem\r\n#RUN&nbsp;docker-php-ext-install&nbsp;sysvshm\r\n\r\n#&nbsp;More&nbsp;extensions&nbsp;handle&nbsp;database\r\n#RUN&nbsp;docker-php-ext-install&nbsp;pdo_firebird\r\n#RUN&nbsp;docker-php-ext-install&nbsp;pdo_dblib\r\n#RUN&nbsp;docker-php-ext-install&nbsp;pdo_oci\r\n#RUN&nbsp;docker-php-ext-install&nbsp;pdo_odbc\r\n#RUN&nbsp;docker-php-ext-install&nbsp;pdo_pgsql\r\n#RUN&nbsp;docker-php-ext-install&nbsp;pgsql\r\n#RUN&nbsp;docker-php-ext-install&nbsp;oci8\r\n#RUN&nbsp;docker-php-ext-install&nbsp;odbc\r\n#RUN&nbsp;docker-php-ext-install&nbsp;dba\r\n#RUN&nbsp;docker-php-ext-install&nbsp;interbase\r\n\r\n#&nbsp;execute&nbsp;`RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libxml2-dev`&nbsp;before&nbsp;using&nbsp;following&nbsp;command\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libxslt-dev\r\n#RUN&nbsp;docker-php-ext-install&nbsp;xsl\r\n#RUN&nbsp;docker-php-ext-install&nbsp;xmlrpc\r\n#RUN&nbsp;docker-php-ext-install&nbsp;wddx\r\n\r\n#&nbsp;Readline\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libreadline-dev\r\n#RUN&nbsp;docker-php-ext-install&nbsp;readline\r\n\r\n#&nbsp;SNMP\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libsnmp-dev\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;snmp\r\n#RUN&nbsp;docker-php-ext-install&nbsp;snmp\r\n\r\n#&nbsp;pspell\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libpspell-dev\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;aspell-en\r\n#RUN&nbsp;docker-php-ext-install&nbsp;pspell\r\n\r\n#&nbsp;recode\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;librecode0\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;librecode-dev\r\n#RUN&nbsp;docker-php-ext-install&nbsp;recode\r\n\r\n#&nbsp;Tidy\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libtidy-dev\r\n#RUN&nbsp;docker-php-ext-install&nbsp;tidy\r\n\r\n#&nbsp;GMP\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libgmp-dev\r\n#RUN&nbsp;docker-php-ext-install&nbsp;gmp\r\n\r\n#&nbsp;Client\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;postgresql-client\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;mysql-client\r\n\r\n#&nbsp;IMAP\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libc-client-dev\r\n#RUN&nbsp;docker-php-ext-configure&nbsp;imap&nbsp;--with-kerberos&nbsp;--with-imap-ssl\r\n#RUN&nbsp;docker-php-ext-install&nbsp;imap\r\n\r\n#&nbsp;LDAP\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libldb-dev\r\n#RUN&nbsp;apt-get&nbsp;install&nbsp;-y&nbsp;libldap2-dev\r\n#RUN&nbsp;docker-php-ext-configure&nbsp;ldap&nbsp;--with-libdir=lib/x86_64-linux-gnu\r\n#RUN&nbsp;docker-php-ext-install&nbsp;ldap\r\n\r\n#&nbsp;Composer\r\n#RUN&nbsp;curl&nbsp;-sS&nbsp;https://getcomposer.org/installer&nbsp;|&nbsp;php&nbsp;--&nbsp;--install-dir=/usr/bin/&nbsp;--filename=composer\r\n\r\n#&nbsp;XDEBUG\r\n#RUN&nbsp;yes&nbsp;|&nbsp;pecl&nbsp;channel-update&nbsp;pecl.php.net&nbsp;&amp;&amp;&nbsp;pecl&nbsp;install&nbsp;xdebug&nbsp;\r\n#&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;echo&nbsp;&quot;zend_extension=$(find&nbsp;/usr/local/lib/php/extensions/&nbsp;-name&nbsp;xdebug.so)&quot;&nbsp;&gt;&nbsp;/usr/local/etc/php/conf.d/xdebug.ini&nbsp;\r\n#&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;echo&nbsp;&quot;xdebug.remote_enable=on&quot;&nbsp;&gt;&gt;&nbsp;/usr/local/etc/php/conf.d/xdebug.ini&nbsp;\r\n#&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;echo&nbsp;&quot;xdebug.remote_handler=dbgp&quot;&nbsp;&gt;&gt;&nbsp;/usr/local/etc/php/conf.d/xdebug.ini\r\n#&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;echo&nbsp;&quot;xdebug.xdebug.remote_host=127.0.0.1&quot;&nbsp;&gt;&gt;&nbsp;/usr/local/etc/php/conf.d/xdebug.ini\r\n#&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;echo&nbsp;&quot;xdebug.xdebug.remote_port=9000&quot;&nbsp;&gt;&gt;&nbsp;/usr/local/etc/php/conf.d/xdebug.ini</pre><p><br/></p><p><strong>创建docker-compose.yml</strong></p><p><strong><br/></strong></p><p>在docker文件下创建文件docker-compose.yml</p><pre class=\"brush:bash;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;php:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#depends_on:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;mysql\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;build:&nbsp;./php/\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;container_name:&nbsp;php\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restart:&nbsp;always\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;privileged:&nbsp;true\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;links:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;mysql:mysql\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;volumes:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;./src/:/var/www/html/:rw\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;./src/data:/var/www/html/data:rw\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;./php/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;./php/log/:/var/log/php-fpm/:rw\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expose:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&quot;9000&quot;</pre><p><span style=\"color: rgb(192, 0, 0);\">docker-compose.yml注意事项</span></p><p><span style=\"color: rgb(192, 0, 0);\">1.格式需要对其 我因为这个问题报错找了N久</span></p><p><span style=\"color: rgb(192, 0, 0);\">2.#是注释</span></p><p><span style=\"color: rgb(192, 0, 0);\">&nbsp;</span></p><p><span style=\"color: rgb(127, 127, 127);\">参数解释：</span><br/></p><p><span style=\"color: rgb(127, 127, 127);\">depends_on：前置需要</span></p><p><span style=\"color: rgb(127, 127, 127);\">build: ./php/ 根据Dockerfile文件创建容器</span></p><p><span style=\"color: rgb(127, 127, 127);\">container_name：创建的容器名称</span></p><p><span style=\"color: rgb(127, 127, 127);\">restart: always&nbsp;&nbsp;意外停止自动重启</span></p><p><span style=\"color: rgb(127, 127, 127);\">volumes&nbsp;挂载数据卷 本地path：容器path ： 权限 | ro不可创建文件 rw可读写</span></p><p><span style=\"color: rgb(127, 127, 127);\">links&nbsp;链接容器</span></p><p><span style=\"color: rgb(127, 127, 127);\">ports&nbsp;端口映射 本地prot ： 容器prot</span></p><p><br/></p><p><span style=\"color: rgb(192, 0, 0);\">保存然后上传github</span></p><p><br/></p><p><strong>执行脚本</strong></p><pre class=\"brush:bash;toolbar:false\">git&nbsp;clone&nbsp;https://github.com/xxxx/docker.git&nbsp;&nbsp;xxx替换为你自己的\r\ncd&nbsp;docker\r\ndocker-compose&nbsp;up&nbsp;-d</pre><p>docker ps 查看运行成功了没有如果现实如下表示成功运行<br/></p><p><br/></p><p><img src=\"/uploadfile/ueditor/20171011/1507687796857430.png\" title=\"1507687796857430.png\" alt=\"image.png\"/><br/></p><p><br/></p><p>步抓取容器配置文件到本地<br/></p><pre class=\"brush:bash;toolbar:false\">docker&nbsp;cp&nbsp;php:/usr/local/php&nbsp;~/docker/php</pre><p>这句代码表示抓取php容器的php文件 存放到 自己的docker文件下的php中</p><p><br/></p><p><span style=\"color: rgb(192, 0, 0);\">找到www.conf文件&nbsp;然后在php文件夹中创建php-fpm.d文件夹将其文件保存在这里</span></p><p><span style=\"color: rgb(192, 0, 0);\"><br/></span></p><p><strong>最后一步修改docker-compose.yml</strong></p><pre class=\"brush:bash;toolbar:false\">php:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#depends_on:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;mysql\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;build:&nbsp;./php/\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;container_name:&nbsp;php\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restart:&nbsp;always\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;privileged:&nbsp;true\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;links:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;mysql:mysql\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;volumes:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;./src/:/var/www/html/:rw\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;./src/data:/var/www/html/data:rw\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;./php/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;./php/log/:/var/log/php-fpm/:rw\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;expose:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&quot;9000&quot;</pre><p><span style=\"color: rgb(192, 0, 0);\"><br/></span></p><p><span style=\"color: rgb(192, 0, 0);\">完成后上传github</span></p><p><span style=\"color: rgb(192, 0, 0);\"><br/></span></p><p><strong>最后执行脚本</strong><br/></p><pre class=\"brush:bash;toolbar:false\">cd\r\nrm&nbsp;-rf&nbsp;docker&nbsp;\r\ngit&nbsp;clone&nbsp;https://github.com/xxxx/docker.git\r\ncd&nbsp;docker\r\ndocker-compose&nbsp;up</pre><p><br/></p><p><span style=\"color: rgb(192, 0, 0);\">现在我们完成了php的docker部署 不管你在哪点都可以一个脚本完成php安装</span></p><p><span style=\"color: rgb(192, 0, 0);\"><br/></span></p><p><span style=\"color: rgb(192, 0, 0);\">下一章讲如何创建mysql nginx主体思路和php差不多</span></p><p>							 	</p><p>							 	</p><p>							 	</p>'),(5,'<p>							 	</p><p>							 	</p><p>一般情况下，我们在操作和运维VPS、服务器的时候可能会用到crontab定时任务的配置，比如定时的重启服务器、定时备份数据等操作使用的还是比较多的。这里就离不开使用crontab命令的任务配置，在这篇文章中将会整理较为齐全的crontab命令使用的方法以及常用的实例操作。<br/></p><p><img src=\"/uploadfile/ueditor/20171011/1507694617148181.jpg\" title=\"1507694617148181.jpg\" alt=\"1507694355630383.jpg\"/></p><p>从上图中，我们其实就可以看到crontab具体用法。一共有6个段落，前面5个标示定时的时间设定，后面一个标示文件的路径定时执行。</p><p><strong>第一 crontab安装</strong></p><p>一般我们使用的centos或者debian发行版本都自带crontab定时软件支持的，如果系统不支持，我们只需要通过下面对应的安装就可以。</p><p><strong>1、centos安装crontab</strong></p><blockquote><pre class=\"brush:bash;toolbar:false\">#安装Crontab\r\nyum&nbsp;install&nbsp;vixie-cron&nbsp;crontabs\r\n#设置开机启动Crontab\r\nchkconfig&nbsp;crond&nbsp;on\r\n#启动Crontab\r\nservice&nbsp;crond&nbsp;start</pre><p><br/></p></blockquote><p><strong>2、debian安装crontab</strong></p><blockquote><pre class=\"brush:bash;toolbar:false\">#安装Crontab\r\napt-get&nbsp;install&nbsp;cron\r\n#重启Crontab\r\n/etc/init.d/cron&nbsp;restart</pre><p><br/></p></blockquote><p>确保系统安装且运行生效之后才可以相关的设置。</p><p><br/></p><p><strong>第二 定时任务案例</strong></p><pre class=\"brush:bash;toolbar:false\">35&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;updatedb</pre><p>每隔一小时35分钟的时候更新一次数据库。</p><pre class=\"brush:bash;toolbar:false\">*/5&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;/usr/local/bin/diskusage.sh</pre><p>每隔5分钟运行diskusage.sh文件。</p><pre class=\"brush:bash;toolbar:false\">25,50&nbsp;1&nbsp;15&nbsp;*&nbsp;2&nbsp;/usr/local/bin/diskusage.sh</pre><p>每周二1:50AM执行文件</p><pre class=\"brush:bash;toolbar:false\">00&nbsp;14&nbsp;10&nbsp;3,6,9,12&nbsp;*&nbsp;/usr/local/bin/diskusage.sh</pre><p>每年3、6、9、12月份第十天下午2点执行。</p><pre class=\"brush:bash;toolbar:false\">00&nbsp;21&nbsp;*&nbsp;*&nbsp;Mon,Wed,Fri&nbsp;/usr/local/bin/diskusage.sh&nbsp;admin@laozuo.org</pre><p>每周一、三、五下午9点执行脚本</p><pre class=\"brush:bash;toolbar:false\">*/5&nbsp;*&nbsp;*&nbsp;*&nbsp;1-5&nbsp;/usr/local/bin/diskusage.sh</pre><p>周一到周五，每五分钟执行。</p><p><br/></p><p><strong>第三 系统调度</strong></p><blockquote><pre class=\"brush:bash;toolbar:false\">/etc/cron.d&nbsp;/etc/cron.daily&nbsp;/etc/cron.hourly&nbsp;/etc/cron.monthly&nbsp;/etc/cron.weekly</pre><p><br/></p></blockquote><p>如果我们根目录在执行backup.sh备份命令，使用上面脚本可以直接替换到/etc/cron.weekly目录。</p><p><br/></p><p><strong>第四 定时计划的级别设定</strong></p><p><strong><br/></strong></p><p>我们在操作的时候，每个用户都可以编辑、查看、删除crontab定时配置文件。如果根用户需要改crontab文件，必须加上&#39;-u&#39;选项来指定用户名。</p><p>1、编辑crontab文件的用户laozuo时候，我们可以使用命令：</p><pre class=\"brush:bash;toolbar:false\">crontab&nbsp;-u&nbsp;laozuo&nbsp;-e</pre><p>2、移除laozuo用户的定时设定</p><pre class=\"brush:bash;toolbar:false\">crontab&nbsp;-u&nbsp;laozuo&nbsp;-r</pre><p>3、查看laozuo定时任务设置文件</p><pre class=\"brush:bash;toolbar:false\">crontab&nbsp;-u&nbsp;laozuo&nbsp;-l</pre><p><strong>第五 从文件中加载crontab</strong></p><p>我们除了可以手工编辑定时文件之外，还可以文件加载到定时文件中。</p><blockquote><pre class=\"brush:bash;toolbar:false\">cat&nbsp;/root/mycronjobs.txt\r\n53&nbsp;00&nbsp;*&nbsp;*&nbsp;7&nbsp;/bin/sh&nbsp;/root/server-backup.sh\r\n01&nbsp;00&nbsp;*&nbsp;*&nbsp;*&nbsp;/bin/sh&nbsp;/root/check-user-quota.sh</pre><p><br/></p></blockquote><p>我们需要先上传编辑好的mycronjobs.txt定时任务文件到目录中，然后才可以执行。</p><blockquote><pre class=\"brush:bash;toolbar:false\">crontab&nbsp;/root/mycronjobs.txt</pre><p><br/></p></blockquote><p>通过这个命令检查验证。</p><blockquote><pre class=\"brush:bash;toolbar:false\">crontab&nbsp;-l\r\n53&nbsp;00&nbsp;*&nbsp;*&nbsp;7&nbsp;/bin/sh&nbsp;/root/server-backup.sh\r\n01&nbsp;00&nbsp;*&nbsp;*&nbsp;*&nbsp;/bin/sh&nbsp;/root/check-user-quota.sh</pre><p><br/></p></blockquote><p>这里我们可以检查定时文件是否存在。</p><p><strong>第<strong style=\"white-space: normal;\">六</strong> 加入SELinux安全选项</strong></p><blockquote><pre class=\"brush:bash;toolbar:false\">crontab&nbsp;-s&nbsp;/root/mycronjobs/my.txt\r\nSELINUX_ROLE_TYPE=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\r\n53&nbsp;00&nbsp;*&nbsp;*&nbsp;7&nbsp;/bin/sh&nbsp;/root/server-backup.sh\r\n01&nbsp;00&nbsp;*&nbsp;*&nbsp;*&nbsp;/bin/sh&nbsp;/root/check-user-quota.sh</pre><p><br/></p></blockquote><p><strong>第七 删除定时任务工作</strong></p><blockquote><pre class=\"brush:bash;toolbar:false\">[root@linux&nbsp;~]#&nbsp;crontab&nbsp;-l53&nbsp;00&nbsp;*&nbsp;*&nbsp;7&nbsp;/bin/sh&nbsp;/root/server-backup.sh01&nbsp;00&nbsp;*&nbsp;*&nbsp;*&nbsp;/bin/sh&nbsp;/root/check-user-quota.sh\r\n[root@linux&nbsp;~]#&nbsp;crontab&nbsp;-r\r\n[root@linux&nbsp;~]#&nbsp;crontab&nbsp;-lno&nbsp;crontab&nbsp;for&nbsp;root</pre><p><br/></p></blockquote><p>我们先用-l查看当前的定时任务，然后用-r删除，然后再检查已经没有任务选项。</p><p>总结，以上6个步骤和方法，就是我们常用的crontab定时文件配置常用的，一般我们会用的多的是备份和定时启动等，根据我们实际的需要再进行时间上的调整。</p><p><br/></p><p>							 	</p><p>							 	</p>'),(6,'<p style=\"white-space: normal;\">\r\n    一些错误信息的处理，主从服务器上的命令，及状态信息。<br/>在从服务器上使用show&nbsp;slave&nbsp;status\\G<br/><br/>Slave_IO_Running,为No,<br/>则说明IO_THREAD没有启动，请执行start&nbsp;slave&nbsp;io_thread<br/><br/>Slave_SQL_Running为No<br/>则复制出错,查看Last_error字段排除错误后执行start&nbsp;slave&nbsp;sql_thread&nbsp;<br/><br/>查看Slave_IO_State字段空&nbsp;//复制没有启动<br/>Connecting&nbsp;to&nbsp;master//没有连接上master<br/>Waiting&nbsp;for&nbsp;master&nbsp;to&nbsp;send&nbsp;event//已经连上\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    主服务器上的相关命令：&nbsp;<br/>show&nbsp;master&nbsp;status&nbsp;<br/>show&nbsp;slave&nbsp;hosts&nbsp;<br/>show&nbsp;logs&nbsp;<br/>show&nbsp;binlog&nbsp;events&nbsp;<br/>purge&nbsp;logs&nbsp;to&nbsp;&#39;log_name&#39;&nbsp;<br/>purge&nbsp;logs&nbsp;before&nbsp;&#39;date&#39;&nbsp;<br/>reset&nbsp;master(老版本flush&nbsp;master)&nbsp;<br/>set&nbsp;sql_log_bin=\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    从服务器上的相关命令:&nbsp;<br/>slave&nbsp;start&nbsp;<br/>slave&nbsp;stop&nbsp;<br/>SLAVE&nbsp;STOP&nbsp;IO_THREAD&nbsp;//此线程把master段的日志写到本地&nbsp;<br/>SLAVE&nbsp;start&nbsp;IO_THREAD&nbsp;<br/>SLAVE&nbsp;STOP&nbsp;SQL_THREAD&nbsp;//此线程把写到本地的日志应用于数据库&nbsp;<br/>SLAVE&nbsp;start&nbsp;SQL_THREAD&nbsp;<br/>reset&nbsp;slave&nbsp;<br/>SET&nbsp;GLOBAL&nbsp;SQL_SLAVE_SKIP_COUNTER&nbsp;<br/>load&nbsp;data&nbsp;from&nbsp;master&nbsp;<br/>show&nbsp;slave&nbsp;status(SUPER,REPLICATION&nbsp;CLIENT)&nbsp;<br/>CHANGE&nbsp;MASTER&nbsp;TO&nbsp;MASTER_HOST=,&nbsp;MASTER_PORT=,MASTER_USER=,&nbsp;MASTER_PASSWORD=&nbsp;//动态改变master信息<br/>PURGE&nbsp;MASTER&nbsp;[before&nbsp;&#39;date&#39;]&nbsp;删除master端已同步过的日志&nbsp;\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>6.3.1&nbsp;Master&nbsp;同步线程状态\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    以下列出了master的&nbsp;Binlog&nbsp;Dump&nbsp;线程&nbsp;State&nbsp;字段中最常见的几种状态。如果在master上没有&nbsp;Binlog&nbsp;Dump&nbsp;线程，那么同步就没有在运行。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    也就是说，没有slave连接上来。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Sending&nbsp;binlog&nbsp;event&nbsp;to&nbsp;slave\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    事件是由二进制日志构成，一个事件通常由更新语句加上其他信息。线程读取到一个事件并正发送到slave上。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Finished&nbsp;reading&nbsp;one&nbsp;binlog;&nbsp;switching&nbsp;to&nbsp;next&nbsp;binlog\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    读取完了一个二进制日志，正切换到下一个。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Has&nbsp;sent&nbsp;all&nbsp;binlog&nbsp;to&nbsp;slave;&nbsp;waiting&nbsp;for&nbsp;binlog&nbsp;to&nbsp;be&nbsp;updated\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    已经读取完全部未完成更新日志，并且全部都发送到slave了。它处于空闲状态，正等待在master上执行新的更新操作以在二进制日志中产生新\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    的事件，然后读取它们。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Waiting&nbsp;to&nbsp;finalize&nbsp;termination\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    当前线程停止了，这个时间很短。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    6.3.2&nbsp;Slave的I/O线程状态\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    以下列出了slave的I/O线程&nbsp;State&nbsp;字段中最常见的几种状态。从MySQL&nbsp;4.1.1开始，这个状态在执行&nbsp;SHOW&nbsp;SLAVE&nbsp;STATUS&nbsp;语句结果的\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    Slave_IO_State&nbsp;字段也会出现。这意味着可以只执行&nbsp;SHOW&nbsp;SLAVE&nbsp;STATUS&nbsp;语句就能了解到更多的信息。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Connecting&nbsp;to&nbsp;master\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    该线程证尝试连接到master上。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Checking&nbsp;master&nbsp;version\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    确定连接到master后出现的一个短暂的状态。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Registering&nbsp;slave&nbsp;on&nbsp;master\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    确定连接到master后出现的一个短暂的状态。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Requesting&nbsp;binlog&nbsp;dump\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    确定连接到master后出现的一个短暂的状态。该线程向master发送一个请求，告诉它要请求的二进制文件以及开始位置。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Waiting&nbsp;to&nbsp;reconnect&nbsp;after&nbsp;a&nbsp;failed&nbsp;binlog&nbsp;dump&nbsp;request\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    如果二进制日志转储(binary&nbsp;log&nbsp;dump)请求失败了(由于连接断开)，该线程在休眠时进入这个状态，并定期重连。重连的时间间隔由&nbsp;--\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    master-connect-retry&nbsp;选项来指定。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Reconnecting&nbsp;after&nbsp;a&nbsp;failed&nbsp;binlog&nbsp;dump&nbsp;request\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    该线程正尝试重连到master。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Waiting&nbsp;for&nbsp;master&nbsp;to&nbsp;send&nbsp;event\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    已经连接到master，正等待它发送二进制日志。如果master闲置时，这个状态可能会持续较长时间，如果它等待超过&nbsp;slave_read_timeout&nbsp;秒\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ，就会发生超时。这时，它就会考虑断开连接，然后尝试重连。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Queueing&nbsp;master&nbsp;event&nbsp;to&nbsp;the&nbsp;relay&nbsp;log\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    已经读取到一个事件，正把它拷贝到中继日志中以备SQL线程处理。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Waiting&nbsp;to&nbsp;reconnect&nbsp;after&nbsp;a&nbsp;failed&nbsp;master&nbsp;event&nbsp;read\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    读日志时发生错误(由于连接断开)。该线程在重连之前休眠&nbsp;master-connect-retry&nbsp;秒。<br/>Reconnecting&nbsp;after&nbsp;a&nbsp;failed&nbsp;master&nbsp;event&nbsp;read\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>正尝试重连到master。当连接确定后，状态就变成&nbsp;Waiting&nbsp;for&nbsp;master&nbsp;to&nbsp;send&nbsp;event。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Waiting&nbsp;for&nbsp;the&nbsp;slave&nbsp;SQL&nbsp;thread&nbsp;to&nbsp;free&nbsp;enough&nbsp;relay&nbsp;log&nbsp;space\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    relay_log_space_limit&nbsp;的值非零，中继日志的大小总和超过这个值了。I/O线程等待SQL线程先处理中继日志然后删除它们以释放足够的空间\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Waiting&nbsp;for&nbsp;slave&nbsp;mutex&nbsp;on&nbsp;exit\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    当前线程停止了，这个时间很短。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    6.3.3&nbsp;Slave的SQL线程状态\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    以下列出了slave的SQL线程&nbsp;State&nbsp;字段中最常见的几种状态：\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Reading&nbsp;event&nbsp;from&nbsp;the&nbsp;relay&nbsp;log\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    从中继日志里读到一个事件以备执行。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Has&nbsp;read&nbsp;all&nbsp;relay&nbsp;log;&nbsp;waiting&nbsp;for&nbsp;the&nbsp;slave&nbsp;I/O&nbsp;thread&nbsp;to&nbsp;update&nbsp;it\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    已经处理完中继日志中的全部事件了，正等待I/O线程写入更新的日志。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>Waiting&nbsp;for&nbsp;slave&nbsp;mutex&nbsp;on&nbsp;exit\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    当前线程停止了，这个时间很短。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    故障\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    问题：主从复制不止何故停止了，我该怎么办？\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    答案：复制错误多半是因为日志错误引起的，所以首先要搞清楚是主日志错误还是中继日志错误，从错误信息里一般就能判断，如果不能可以使用类似下面的mysqlbinlog命令：\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    mysqlbinlog&nbsp;&lt;MASTER_BINLOG_FILE&gt;&nbsp;&gt;&nbsp;/dev/null\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    mysqlbinlog&nbsp;&lt;SLAVE_BINLOG_FILE&gt;&nbsp;&gt;&nbsp;/dev/null\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    如果没有错误，则不会有任何输出，反之如果有错误，则会显示出来。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    如果是主日志错误，则需要在从服务器使用SET&nbsp;GLOBAL&nbsp;sql_slave_skip_counter，如下：\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    SET&nbsp;GLOBAL&nbsp;sql_slave_skip_counter&nbsp;=&nbsp;1;\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    START&nbsp;SLAVE;\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    注：如果有多个错误，可能需要执行多次（提醒：主从服务器数据可能因此不一致）。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    如果是中继日志错误，只要在从服务器使用SHOW&nbsp;SLAVE&nbsp;STATUS结果中的日志信息重新CHANGE&nbsp;MASTER&nbsp;TO即可，系统会抛弃当前的中继日志，重新下载：\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    CHANGE&nbsp;MASTER&nbsp;TO\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    MASTER_LOG_FILE=&#39;&lt;Relay_Master_Log_File&gt;&#39;,\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    MASTER_LOG_POS=&lt;Exec_Master_Log_Pos&gt;;\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    START&nbsp;SLAVE;\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    至于为什么使用的是Relay_Master_Log_File&nbsp;&amp;&nbsp;Exec_Master_Log_Pos，参见概述。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    问题：主服务器宕机了，如何把从服务器提升会主服务器？\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    答案：在一主多从的环境总，需选择数据最新的从服务器做新的主服务器。如下图所示：\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    提升从服务器为主服务器\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    在一主（Server1）两从（Server2，、Server3）的环境中，Server1宕机后，等到Server1和Server2把宕机前同步到的日志都执行完，比较Master_Log_File和Read_Master_Log_Pos就可以判断出谁快谁慢，因为Server2从&nbsp;Server1同步的数据（1582）比Server3从Server1同步的数据（1493）新，所以应该提升Server2为新的主服务器，那么&nbsp;Server3在CHANGE&nbsp;MASTER&nbsp;TO到Server2的时候应该使用什么样的参数呢？1582-1493=89，而Server2的最后的二进制日志位置是8167，所以答案是&nbsp;8167-89=8078。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    技巧\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    主从服务器中的表可以使用不同的表类型。比如主服务器可以使用InnoDB表类型，提供事务，行锁等高级特性，从服务器可以使用MyISAM表类型，内存消耗少，易备份等优点。还有一个例子，一台主服务器如果同时带很多个从服务器的话，势必会影响其性能，此时可以拿出一台服务器作为从服务器代理，使用BLACKHOLE表类型，只记录日志，不写数据，由它带多台从服务器，从而提升性能。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    主从服务器中的表可以使用不同的键类型。比如主服务器用InnoDB，键用VARCHAR的话节省空间，从服务器使用MyISAM，键用CHAR提高速度，因为MyISAM有静态表一说。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    主从服务器中的表可以使用不同的索引。主服务器主要用来应付写操作，所以除了主键和唯一索引等保证数据关系的索引一般都可以不加，从服务器一般用来应付读操作，所以可以针对查询特征设置索引，再进一步，不同的从服务器可以针对不同的查询设置不同的索引。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    MySQL同步功能由3个线程(master上1个，slave上2个)来实现。执行&nbsp;DE&gt;START&nbsp;SLAVEDE&gt;&nbsp;语句后，slave就创建一个I/O线程。I/O线程连接到master上，并请求master发送二进制日志中的语句。master创建一个线程来把日志的内容发送到slave上。这个线程在master上执行&nbsp;DE&gt;SHOW&nbsp;PROCESSLISTDE&gt;&nbsp;语句后的结果中的&nbsp;DE&gt;Binlog&nbsp;DumpDE&gt;&nbsp;线程便是。slave上的I/O线程读取master的&nbsp;DE&gt;Binlog&nbsp;DumpDE&gt;&nbsp;线程发送的语句，并且把它们拷贝到其数据目录下的中继日志(relay&nbsp;logs)中。第三个是SQL线程，salve用它来读取中继日志，然后执行它们来更新数据。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    如上所述，每个master/slave上都有3个线程。每个master上有多个线程，它为每个slave连接都创建一个线程，每个slave只有I/O和SQL线程。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    show&nbsp;slave&nbsp;master&nbsp;用于提供有关从属服务器线程的关键参数的信息\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    SHOW&nbsp;SLAVE&nbsp;STATUS会返回以下字段：\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Slave_IO_State\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    SHOW&nbsp;PROCESSLIST输出的State字段的拷贝。SHOW&nbsp;PROCESSLIST用于从属I/O线程。如果线程正在试图连接到主服务器，正在等待来自主服务器的时间或正在连接到主服务器等，本语句会通知您\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Master_User\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    被用于连接主服务器的当前用户。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Master_Port\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    当前的主服务器接口。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Connect_Retry\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    –master-connect-retry选项的当前值\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Master_Log_File\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    I/O线程当前正在读取的主服务器二进制日志文件的名称。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Read_Master_Log_Pos\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    在当前的主服务器二进制日志中，I/O线程已经读取的位置。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Relay_Log_File\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    SQL线程当前正在读取和执行的中继日志文件的名称。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Relay_Log_Pos\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    在当前的中继日志中，SQL线程已读取和执行的位置。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Relay_Master_Log_File\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    由SQL线程执行的包含多数近期事件的主服务器二进制日志文件的名称。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Slave_IO_Running\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    I/O线程是否被启动并成功地连接到主服务器上。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Slave_SQL_Running\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    SQL线程是否被启动。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Replicate_Do_DB,Replicate_Ignore_DB\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    使用–replicate-do-db和–replicate-ignore-db选项指定的数据库清单。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Replicate_Do_Table,Replicate_Ignore_Table,Replicate_Wild_Do_Table,Replicate_Wild_Ignore_Table\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    使用–replicate-do-table,–replicate-ignore-table,–replicate-wild-do-table和–replicate-wild-ignore_table选项指定的表清单。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Last_Errno,Last_Error\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    被多数最近被执行的查询返回的错误数量和错误消息。错误数量为0并且消息为空字符串意味着“没有错误”。如果Last_Error值不是空值，它也会在从属服务器的错误日志中作为消息显示。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    举例说明：\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    Last_Errno:&nbsp;1051\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    Last_Error:&nbsp;error&nbsp;‘Unknown&nbsp;table&nbsp;‘z”&nbsp;on&nbsp;query&nbsp;‘drop&nbsp;table&nbsp;z’\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    该消息指示，表z曾经存在于在主服务器中并已被取消了，但是它没有在从属服务器中存在过，因此对于从属服务器，DROP&nbsp;TABLE失败。（举例说明，在设置复制时，如果您忘记了把此表拷贝到从属服务器中，则这有可能发生。）\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Skip_Counter\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    最近被使用的用于SQL_SLAVE_SKIP_COUNTER的值。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Exec_Master_Log_Pos\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    来自主服务器的二进制日志的由SQL线程执行的上一个时间的位置（Relay_Master_Log_File）。在主服务器的二进制日志中的(Relay_Master_Log_File,&nbsp;Exec_Master_Log_Pos)对应于在中继日志中的(Relay_Log_File,Relay_Log_Pos)。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Relay_Log_Space\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    所有原有的中继日志结合起来的总大小。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Until_Condition,Until_Log_File,Until_Log_Pos\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    在START&nbsp;SLAVE语句的UNTIL子句中指定的值。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    Until_Condition具有以下值：\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    o&nbsp;如果没有指定UNTIL子句，则没有值\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    o&nbsp;如果从属服务器正在读取，直到达到主服务器的二进制日志的给定位置为止，则值为Master\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    o&nbsp;如果从属服务器正在读取，直到达到其中继日志的给定位置为止，则值为Relay\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    Until_Log_File和Until_Log_Pos用于指示日志文件名和位置值。日志文件名和位置值定义了SQL线程在哪个点中止执行。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ?&nbsp;Master_SSL_Allowed,Master_SSL_CA_File,Master_SSL_CA_Path,Master_SSL_Cert,Master_SSL_Cipher,Master_SSL_Key\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    这些字段显示了被从属服务器使用的参数。这些参数用于连接主服务器。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    Master_SSL_Allowed具有以下值：\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    o&nbsp;如果允许对主服务器进行SSL连接，则值为Yes\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    o&nbsp;如果不允许对主服务器进行SSL连接，则值为No\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    o&nbsp;如果允许SSL连接，但是从属服务器没有让SSL支持被启用，则值为Ignored。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    与SSL有关的字段的值对应于–master-ca,–master-capath,–master-cert,–master-cipher和–master-key选项\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    ########################################################################<br/>\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    <br/>\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    Replication延时的类型\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;1、固定性的延时\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;——Slave的数据持续性的落后于Master并且一直无法与Master的数据保持一致。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;——Slave的数据经常在白天落后于Master，而在晚上可以赶上并与Master的记录保持一致。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;这种类型的延时通常是由于Slave服务器的负载已经到达了上限或在白天访问量大的时候到达上限造成的。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;2、非固定性的延时\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;——Slave的数据只是短暂的落后于Master，可在短时间内恢复，这类型的延时通常与批量任务和报表有关，效率差的查询也会导致这类延时。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;Mysql&nbsp;Replication的限制\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;　　Mysql的Replication是单线程的，意味着只能有效的使用一个CPU内核和一个磁盘，一条复杂的查询或者事务都导致进程被阻塞，不过现在针对5.1版本的多线程Replication补丁，<a target=\"_blank\" href=\"http://forge.mysql.com/wiki/ReplicationFeatures/ParallelSlave\">http://forge.mysql.com/wiki/ReplicationFeatures/ParallelSlave</a>，还是pre版，有很多限制，感兴趣的可以去看看。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;Replication的容量\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;1、理解什么是Replication的容量\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;　　可以将Replication暂停一个小时，重新启动Replication后，观察Slave的数据多久可以与Master一致。从Replication重新启动到和Master数据一致所花费的时间与Replication暂停的时间的比值就是Replication的容量。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;2、建议保持Replication的容量在3倍以上，即延迟一个小时的数据，Slave只需要20分钟就能与Master的数据一致。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;Replication的优化\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;1、5.0的mysql中避免类似以下的更新语句\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;INSERT&nbsp;…&nbsp;SELECT\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;UPDATE&nbsp;....&nbsp;WHERE\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;　　复杂的查询会导致Replication线程阻塞。如果是insert或update与select结合的语句，可以讲select单独执行并保存在临时表中，然后再执行insert或者update。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;　　如果使用的是5.1的mysql，新功能中的行级Replication（RBR）可以解决这个问题。RBR可以将在Master上通过复杂查询后更新的结果直接传给Slave，Slave可以直接将结果更新到数据库中。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;2、避免大的事务\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;太大的事务会造成Replication长时间阻塞，数据会严重滞后于Master。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;Slave服务器的硬件选择\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;更快的CPU内核，对于单线程的Replication多核CPU是没有任何优势的。更高速的硬盘，包括更高的转速和更好的高速缓存命中率，如果有钱的话上SSD吧。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;主从结构的扩展性问题\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;1、如何降低写操作的频率\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;　　Master的写操作会扩散到所有的Slave上，所以高频率的写操作会降低Slave的读操作效率。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;至少保持一台Slave做全库同步，其他的Slave可以只做部分表的同步。当然，这需要web应用程序的配合来分配哪些查询读哪些Slave。将一些更新操作放到memcached中，例如session和计数器。Slave使用myisam引擎，将一些写入量很大的更新操作直接在slave上执行，而不通过Replication。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;2、如何更有效的利用Slave的硬件资源[&nbsp;变形虫]\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;使用分区\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;有选择的对表进行同步\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;在Slave上对数据进行归档。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;Session的持久化\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;为不同的应用服务器分配不同的Slave进行读操作。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;或者根据查询类型的不同来分配不同的Slave。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;3、如何使你的程序最大化的利用Slave\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;　　将对数据更新不敏感的查询放到Slave上，而需要实时数据的查询则放到Master。通过session的持久化，让做了修改的用户首先看到修改的内容，其他的用户可以等待Slave更新后再查看新内容。\r\n</p>\r\n<p style=\"white-space: normal;\">\r\n    &nbsp;&nbsp;&nbsp;&nbsp;　　对于某些数据，可以用memcached来存放数据的版本号，读Slave的程序可以先对比Slave的数据和memcached数据的版本，如果不一致则去读master。用户和博客类的信息可以用这种方法。在查询前可以通过SHOW&nbsp;SLAVE&nbsp;STATUS检测Slave的状态，然后根据返回的结果进行服务器的选择。\r\n</p>\r\n<p>\r\n    							 	\r\n</p>');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
